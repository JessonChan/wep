package wep
import "fmt"
import "reflect"

func Join(slices interface{}, sep string) (full string) {
	if reflect.TypeOf(slices).Kind() == reflect.Slice {
		s := reflect.ValueOf(slices)
		for i := 0; i < s.Len(); i++ {
			full += fmt.Sprint(s.Index(i))
			if i < s.Len()-1 {
				full += sep
			}
		}
	}
	return
}
func Each(slices interface{}, fn func( int)){
   	if reflect.TypeOf(slices).Kind() == reflect.Slice {
   		s := reflect.ValueOf(slices)
   		for i := 0; i < s.Len(); i++ {
   		    fn(i)
   		}
   	}
}